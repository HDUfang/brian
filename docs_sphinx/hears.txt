.. currentmodule:: brian.hears.newversion

.. index::
	pair: auditory; modelling

.. _brianhears:

Brian hears
===========

Brian hears is the auditory modelling library for Brian. It consists of
classes for defining sounds, filter banks and neuron models. These classes
are designed to be modular and easily extendable. Typically, a model will
consist of a chain starting with a sound which is plugged into a chain of
filter banks, which are then plugged into a neuron model. 

Filter chains
-------------

The standard way to 

Buffering interface
-------------------

The :class:`Sound`, :class:`OnlineSound` and :class:`Filterbank` classes
(and all classes derived from them) all implement the same buffering
mechanism. The purpose of this is to allow for efficient processing of
multiple channels in buffers. Rather than precomputing the application of
filters to all channels (which for large numbers of channels or long sounds
would not fit in memory), we process small chunks at a time. The entire design
of these classes is based on the idea of buffering, as defined by the base
class :class:`Bufferable` (see section `Class diagram`_ below). Each class
has two methods, ``buffer_init()`` to initialise the buffer, and
``buffer_fetch(start, end)`` to fetch the portion of the buffer from samples
with indices from ``start`` to ``end`` (not including ``end`` as standard for
Python). The ``buffer_fetch(start, end)`` method should return a 2D array of
shape ``(end-start, nchannels)`` with the buffered values.

From the user point of view, all you need to do, having set up a chain of
:class:`Sound` and :class:`Filterbank` objects, is to first call
``buffer_init()`` on the final object in the chain (it will initialise the
buffers of all the earlier objects), and then call ``buffer_fetch(start, end)``
repeatedly. If the output of a :class:`Filterbank` is being plugged into a
:class:`FilterbankGroup` object, everything is handled automatically.

To extend :class:`Filterbank`, it is often sufficient just to implement the
``buffer_apply(input)`` method. See the documentation for :class:`Filterbank`
for more details.

Reference
=========

Sounds
------

.. autoclass:: Sound

Filterbanks
-----------

.. autoclass:: LinearFilterbank
.. autoclass:: FunctionFilterbank
.. autoclass:: SumFilterbank
.. autoclass:: DoNothingFilterbank

Filterbank library
------------------

.. autoclass:: GammatoneFilterbank

Filterbank group
----------------

.. autoclass:: FilterbankGroup

Functions
---------

.. autofunction:: erbspace

HRTFs
-----

Coordinates
-----------

Base classes
------------

Useful for understanding more about the internals.

.. autoclass:: brian.hears.newversion.bufferable.Bufferable

.. autoclass:: Filterbank

.. autoclass:: brian.hears.newversion.sounds.BaseSound

.. autoclass:: OnlineSound

.. autoclass:: HRTFDatabase
.. autoclass:: HRTFSet
.. autoclass:: HRTF

.. autoclass:: brian.hears.newversion.hrtf.Coordinates

Class diagram
-------------

.. inheritance-diagram:: Sound OnlineSound Filterbank LinearFilterbank
						 RestructureFilterbank FunctionFilterbank
						 SumFilterbank DoNothingFilterbank
						 FIRFilterbank GammatoneFilterbank
	:parts: 1
