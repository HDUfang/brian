.. currentmodule:: brian

monitor
*******

:class:`SpikeMonitor`
~~~~~~~~~~~~~~~~~~~~~

Records spikes from a :class:`NeuronGroup`. Initialised as one of::

    SpikeMonitor(source(,record=True))
    SpikeMonitor(source,function=function)

Where:

source
    A :class:`NeuronGroup` to record from
record
    True or False to record all the spikes or just summary
    statistics.
function
    A function f(spikes) which is passed the array of spikes
    numbers that have fired called each step, to define
    custom spike monitoring.

Has two attributes:

nspikes
    The number of recorded spikes
spikes
    A time ordered list of pairs (i,t) where neuron i fired
    at time t.

:class:`StateMonitor`
~~~~~~~~~~~~~~~~~~~~~

Records the values of a state variable from a :class:`NeuronGroup`.
Initialise as::

    StateMonitor(P,varname(,record=False)
        (,when='end)(,timestep=1)(,clock=clock))

Where:

P
    The group to be recorded from
varname
    The state variable name or number to be recorded
record
    What to record. The default value is False and the monitor will
    only record summary statistics for the variable. You can choose
    record=integer to record every value of the neuron with that
    number, record=list of integers to record every value of each of
    those neurons, or record=True to record every value of every
    neuron (although beware that this may use a lot of memory).
when
    When the recording should be made in the :class:`Network` update, possible
    values are any of the strings: 'start', 'before_groups', 'after_groups',
    'before_connections', 'after_connections', 'before_resets',
    'after_resets', 'end' (in order of when they are run).
timestep
    A recording will be made each timestep clock updates (so timestep
    should be an integer).
clock
    A clock for the update schedule, use this if you have specified a
    clock other than the default one in your network, or to update at a
    lower frequency than the update cycle. Note though that if the clock
    here is different from the main clock, the when parameter will not
    be taken into account, as network updates are done clock by clock.
    Use the timestep parameter if you need recordings to be made at a
    precise point in the network update step.

The :class:`StateMonitor` object has the following properties (where names
without an underscore return :class:`QuantityArray` objects with appropriate
units and names with an underscore return array objects without
units):

times, times\_
    The times at which recordings were made
mean, mean\_
    The mean value of the state variable for every neuron in the
    group (not just the ones specified in the record keyword)
var, var\_
    The unbiased estimate of the variances, as in mean
std, std\_
    The square root of var, as in mean
    
In addition, if M is a :class:`StateMonitor` object, you write::

    M[i]

for the recorded values of neuron i (if it was specified with the
record keyword). It returns a :class:`QuantityArray` object with units. Downcast
to an array without units by writing asarray(M[i]).

Others
~~~~~~

The following monitors also exist, but are not part of the
assured interface because their syntax is subject to change. See the documentation
for each class for more details.

* :class:`Monitor` (base class)
* :class:`ISIHistogramMonitor`
* :class:`FileSpikeMonitor`
* :class:`PopulationRateMonitor`

