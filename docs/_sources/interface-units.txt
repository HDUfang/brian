.. currentmodule:: brian

units
*****

Names
~~~~~

The following units should exist:

    metre, kilogram, second, amp, kelvin, mole, candle
    radian, steradian, hertz, newton, pascal, joule, watt,
    coulomb, volt, farad, ohm, siemens, weber, tesla, henry,
    celsius, lumen, lux, becquerel, gray, sievert, katal,
    gram, gramme

In addition, all versions of these units scaled by the following
prefixes should exist (in descending order of size):

    Y, Z, E, P, T, G, M, k, h, da, d, c, m, u, n, p, f, a, z, y

And, all of the above units with the suffixes 2 and 3 exist, and
refer to the unit to the power of 2 and 3, e.g. ``metre3 = metre**3``.

Arithmetic
~~~~~~~~~~

The following operations on :class:`Quantity` objects require that the operands
have the same dimensions:

    +, -, <, <=, >, >=, ==, !=

The following operations on :class:`Quantity` objects work with any pair of
operands:

    / and *

In addition, ``-x`` and ``abs(x)`` will work on any :class:`Quantity` ``x``, and will return
values with the same dimension as their argument.

The power operation ``x**y`` requires that ``y`` be dimensionless.

Casting
~~~~~~~

The three rules that define the casting operations for
:class:`Quantity` object are:

1.  :class:`Quantity` op :class:`Quantity` = :class:`Quantity`:
    Performs dimension consistency check if appropriate.
2.  Scalar op :class:`Quantity` = :class:`Quantity`: 
    Assumes that the scalar is dimensionless
3.  other op :class:`Quantity` = other:
    The :class:`Quantity` object is downcast to a ``float``

Scalar types are 1 dimensional number types, including ``float``, ``int``, etc.
but not ``array``.

The :class:`Quantity` class is a derived class of ``float``, so many other operations
will also downcast to ``float``. For example, ``sin(x)`` where ``x`` is a quantity
will return ``sin(float(x))`` without doing any dimension checking. Although
see the Brian.unitsafefunctions module for a way round this. It is better
to be explicit about casting if you can be.

TODO: more details on ``numpy.array``/:class:`Quantity` operations?

:func:`check_units` decorator
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The decorator :func:`check_units` can be used to check that the arguments passed
to a function have the right units, e.g.::

    @check_units(I=amp,V=volt)
    def find_resistance(I,V):
        return V/I

will work if you try ``find_resistance(1*amp,1*volt)`` but raise an exception
if you try ``find_resistance(1,1)`` say.

