.. currentmodule:: brian

clock
*****

The :class:`Clock` object
~~~~~~~~~~~~~~~~~~~~~~~~~

A :class:`Clock` object is initialised via::

    c = Clock(dt=0.1*msecond, t=0*msecond, makedefaultclock=False)

In particular, the following will work and do the same thing::

    c = Clock()
    c = Clock(t=0*second)
    c = Clock(dt=0.1*msecond)
    c = Clock(0.1*msecond,0*second)

Setting the ``makedefaultclock=True`` argument sets the newly
created clock as the default one.

The default clock
~~~~~~~~~~~~~~~~~

The default clock can be found using the :func:`get_default_clock` function,
and redefined using the :func:`define_default_clock` function, where the
arguments passed to :func:`define_default_clock` are the same as the
initialising arguments to the ``Clock(...)`` statement. The default
clock can be reinitialised by calling :func:`reinit_default_clock`.

A less safe way to access the default clock is to refer directly to
the variable :data:`defaultclock`. If the default clock has been redefined, this
won't work.

The :func:`guess_clock` function
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The function :func:`guess_clock` should return (in this order of priority):

* The clock passed as an argument, if one was passed
* A clock defined in the calling function, if there was one
* The default clock otherwise

If more than one clock was defined in the calling function, it should
raise a ``TypeError`` exception.

