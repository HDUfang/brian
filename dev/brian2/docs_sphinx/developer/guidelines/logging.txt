.. currentmodule:: brian2

Logging
=======

Logging in Brian is based on the :mod:`logging` module in Python's standard
library. In Brian2, all logging output is logged to a file (the file name is
available in `brian2.utils.logger.TMP_LOG`). This log file will normally be
deleted on exit, except if an uncaught exception occured or if
:bpref:`delete_log_on_exit` is set to ``False``. The default log level for the
logging on the console is "warn".

Every brian module that needs logging should start with the following line,
using the `get_logger` function to get an instance of `BrianLogger`::

	logger = get_logger(__name__)

In the code, logging can then be done via::

	logger.debug('A debug message')
	logger.info('An info message')
	logger.warn('A warning message')
	logger.error('An error message')

If a module logs similar messages in different places or if it might be useful
to be able to suppress a subset of messages in a module, add an additional
specifier to the logging command, specifying the class or function name, or
a method name including the class name (do not include the module name, it will
be automatically added as a prefix)::

	logger.debug('A debug message', 'CodeString')
	logger.debug('A debug message', 'NeuronGroup.update')
	logger.debug('A debug message', 'reinit')

If you want to log a message only once, e.g. in a function that is called
repeatedly, set the optional ``once`` keyword to ``True``::

	logger.debug('Will only be shown once', once=True)
	logger.debug('Will only be shown once', once=True)

The output of debugging looks like this in the log file::

	2012-10-02 14:41:41,484 DEBUG    brian2.equations.equations.CodeString: A debug message

and like this on the console (if the log level is set to "debug")::

	DEBUG    brian2.equations.equations.CodeString: A debug message

Log level recommendations
-------------------------
debug
	TODO
info
	TODO
warn
	TODO
error
	TODO

Showing/hiding log messages
---------------------------
The user can change the level of displayed log messages by using a static
method of `BrianLogger`::

	BrianLogger.log_level_info() # now also display info messages

It is also possible to suppress messages for certain sub-hiearchies by using
`BrianLogger.suppress_messages`::

	# Suppress code generation messages on the console
	BrianLogger.suppress_messages('brian2.codegen')
	# Suppress preference messages even in the log file
	BrianLogger.suppress_messages('brian2.core.preferences',
	                              filter_log_file=True)

This function should be used with care, as it suppresses messages independent
of the level, i.e. even warning and error messages.
