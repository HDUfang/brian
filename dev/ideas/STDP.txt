Interface and implementation of STDP
====================================
STDP can be described phenomenologically (= more intuitive):
  dw=f(tpost-tpre)
  interactions between all pairs (Song/Abbott) or nearest neighbours (Izhikevich)
  additive/hard bounds (S/A) or multiplicative/soft bounds (van Rossum)
  [NB: more complicated rules: Gerstner's triplet rule]
  
Equivalently, can be described biophysically as a hybrid system:
  pre-synaptic process: differential system + presynaptic spikes acting on a variable
  post-synaptic process: differential system + postsynaptic spikes acting on a variable
  + modification of w with each pre- and post-synaptic spike depending on a variable from the differential systems above
  
In standard cases: f(t>0) is the solution of the presynaptic differential system,
f(t<0) is the solution of the postsynaptic differential system.
The extent of interactions is determined by the resets on the pre and postsynaptic processes.
The additivity or multiplicativity is determined by the resets of w.

Thus, there are two options the interface: phenomenological (simpler) and biophysical (maybe more
generic).

Phenomenological interface
--------------------------
The user must provide:
* f(t>0) and f(t<0)
* consider all or nearest spikes, for both presynaptic and postsynaptic spikes
* weight update rule, for t>0 and t<0. E.g.: w+=dw or w+=(1-w)*dw

Example:
STDP(f_pre=lambda t:Apre*exp(-t/tau_pre),      # or 'Apre*exp(-t/tau_pre)' ?
     f_post=lambda t:Apost*exp(-t/tau_post),
     pre='all',post='nearest',
     update_pre='(1-w)*dw',update_post='dw')
with defaults pre='all', post='all', update_pre='dw', update_post='dw'.
[the _pre and _post suffixes are not good; should causal/anticausal or something like that;
or maybe _prepost and _postpre].

The program would then determine the linear differential equation that best fits the functions
(there are also existing algorithms out there).

Implementation
==============
Differential equations should be solved in an event-based way, maybe with a specific StateUpdater.
This implies solving the differential systems symbolically, maybe using Sympy.
One first step could be to do that for one-dimensional systems (i.e. exponential STDP, the most classic).
