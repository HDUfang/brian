# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.33
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _brianlib
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


class PySwigIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PySwigIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PySwigIterator, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _brianlib.delete_PySwigIterator
    __del__ = lambda self : None;
    def value(*args): return _brianlib.PySwigIterator_value(*args)
    def incr(*args): return _brianlib.PySwigIterator_incr(*args)
    def decr(*args): return _brianlib.PySwigIterator_decr(*args)
    def distance(*args): return _brianlib.PySwigIterator_distance(*args)
    def equal(*args): return _brianlib.PySwigIterator_equal(*args)
    def copy(*args): return _brianlib.PySwigIterator_copy(*args)
    def next(*args): return _brianlib.PySwigIterator_next(*args)
    def previous(*args): return _brianlib.PySwigIterator_previous(*args)
    def advance(*args): return _brianlib.PySwigIterator_advance(*args)
    def __eq__(*args): return _brianlib.PySwigIterator___eq__(*args)
    def __ne__(*args): return _brianlib.PySwigIterator___ne__(*args)
    def __iadd__(*args): return _brianlib.PySwigIterator___iadd__(*args)
    def __isub__(*args): return _brianlib.PySwigIterator___isub__(*args)
    def __add__(*args): return _brianlib.PySwigIterator___add__(*args)
    def __sub__(*args): return _brianlib.PySwigIterator___sub__(*args)
    def __iter__(self): return self
PySwigIterator_swigregister = _brianlib.PySwigIterator_swigregister
PySwigIterator_swigregister(PySwigIterator)

class NeuronGroup(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NeuronGroup, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NeuronGroup, name)
    __repr__ = _swig_repr
    __swig_setmethods__["S"] = _brianlib.NeuronGroup_S_set
    __swig_getmethods__["S"] = _brianlib.NeuronGroup_S_get
    if _newclass:S = _swig_property(_brianlib.NeuronGroup_S_get, _brianlib.NeuronGroup_S_set)
    __swig_setmethods__["S_n"] = _brianlib.NeuronGroup_S_n_set
    __swig_getmethods__["S_n"] = _brianlib.NeuronGroup_S_n_get
    if _newclass:S_n = _swig_property(_brianlib.NeuronGroup_S_n_get, _brianlib.NeuronGroup_S_n_set)
    __swig_setmethods__["S_m"] = _brianlib.NeuronGroup_S_m_set
    __swig_getmethods__["S_m"] = _brianlib.NeuronGroup_S_m_get
    if _newclass:S_m = _swig_property(_brianlib.NeuronGroup_S_m_get, _brianlib.NeuronGroup_S_m_set)
    def __init__(self, *args): 
        this = _brianlib.new_NeuronGroup(*args)
        try: self.this.append(this)
        except: self.this = this
    def get_S_flat(*args): return _brianlib.NeuronGroup_get_S_flat(*args)
    __swig_destroy__ = _brianlib.delete_NeuronGroup
    __del__ = lambda self : None;
NeuronGroup_swigregister = _brianlib.NeuronGroup_swigregister
NeuronGroup_swigregister(NeuronGroup)

class LinearStateUpdater(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LinearStateUpdater, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LinearStateUpdater, name)
    __repr__ = _swig_repr
    __swig_setmethods__["M"] = _brianlib.LinearStateUpdater_M_set
    __swig_getmethods__["M"] = _brianlib.LinearStateUpdater_M_get
    if _newclass:M = _swig_property(_brianlib.LinearStateUpdater_M_get, _brianlib.LinearStateUpdater_M_set)
    __swig_setmethods__["M_n"] = _brianlib.LinearStateUpdater_M_n_set
    __swig_getmethods__["M_n"] = _brianlib.LinearStateUpdater_M_n_get
    if _newclass:M_n = _swig_property(_brianlib.LinearStateUpdater_M_n_get, _brianlib.LinearStateUpdater_M_n_set)
    __swig_setmethods__["M_m"] = _brianlib.LinearStateUpdater_M_m_set
    __swig_getmethods__["M_m"] = _brianlib.LinearStateUpdater_M_m_get
    if _newclass:M_m = _swig_property(_brianlib.LinearStateUpdater_M_m_get, _brianlib.LinearStateUpdater_M_m_set)
    __swig_setmethods__["b"] = _brianlib.LinearStateUpdater_b_set
    __swig_getmethods__["b"] = _brianlib.LinearStateUpdater_b_get
    if _newclass:b = _swig_property(_brianlib.LinearStateUpdater_b_get, _brianlib.LinearStateUpdater_b_set)
    __swig_setmethods__["b_n"] = _brianlib.LinearStateUpdater_b_n_set
    __swig_getmethods__["b_n"] = _brianlib.LinearStateUpdater_b_n_get
    if _newclass:b_n = _swig_property(_brianlib.LinearStateUpdater_b_n_get, _brianlib.LinearStateUpdater_b_n_set)
    def __init__(self, *args): 
        this = _brianlib.new_LinearStateUpdater(*args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(*args): return _brianlib.LinearStateUpdater___call__(*args)
    __swig_destroy__ = _brianlib.delete_LinearStateUpdater
    __del__ = lambda self : None;
LinearStateUpdater_swigregister = _brianlib.LinearStateUpdater_swigregister
LinearStateUpdater_swigregister(LinearStateUpdater)



