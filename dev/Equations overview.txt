An overview of how equations are/should be handled by Brian
===========================================================
An Equation is a set of single lines in a string:
    (1) ``dx/dt = f : unit`` (differential equation)
    (2) ``x = f : unit`` (equation)
    (3) ``x = y`` (alias)
    (4) ``x : unit`` (parameter)

Two special variables are defined: t (time) and xi (white noise).
Ultimately, it should be possible (using Sympy) to define equations implicitly,
e.g.: 'tau*dv/dt=-v : unit' (although it makes unit specification ambiguous).

An equation can be seen as a set of functions or code and a namespace to evaluate
them. A key part of object construction is the construction of the namespace
(after parsing).

Namespace construction
----------------------
The namespace is stored in eq._namespace.

Variable substitution
^^^^^^^^^^^^^^^^^^^^^
These are simply string substitutions.
* Equation('dv/dt=-v/tau:volt',tau='taum')
The name of the variable (tau) is changed in the string to taum.

* Equation('dv/dt=-v/tau:volt',tau=None)
The name of the variable (tau) is changed in the string to a unique identifier.

Explicit namespace
^^^^^^^^^^^^^^^^^^
* Equation('dv/dt=-v/tau:volt',tau=2*ms)
The namespace is explicitly given: {'tau':2*ms}. In this case, Brian does not try
to build a namespace "magically", so the namespace must be exhaustive.
Units need not be passed.

Implicit namespace
^^^^^^^^^^^^^^^^^^
* Equation('dv/dt=-v/tau:volt')
The namespace is built from the globals and locals in the caller's frame.
For each identifier in the string, the name is looked up in:
1) locals of caller
2) globals of caller
3) globals of equations.py module (typically units).
