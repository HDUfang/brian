BEP-10: Error handling

Abstract: Errors raised by Brian scripts are often hard to understand because
the error is typically raised in a subroutine of a Brian module that the user
doesn't know about. The idea would be to have clearer error messages and error
catching mechanisms that would relate the error and its context to the Brian
script.

I am just listing a few ideas here.

Defining a new exception BrianError and subclasses
==================================================
For example, we could imagine that each major class would have
its exception type, and the exception would be called with
the instance of the class (self) and other runtime information.

A separate module could gather a number of functions to make the
message nicer and to do some introspection into the traceback,
the frames and the user script (using the get_source function from the
inspect module).
These could be methods of a base Exception class BrianError.

Nested exceptions
=================
In many cases, the function that raises the exception does not know
the context, such as the user-defined differential equations, etc.
One could imagine to use a specific exception to pass information
to the calling function, e.g.:

def a_specific_method(self):
	...
	raise SpecificException(self,other_information)
	
def global_function():
	try:
		eqs.a_specific_method()
	except SpecificException as e:
		useful_info=e.other_information
		raise WhatEverError("I got one!",useful_info)
		# or WhatEverError(e,...)

Real cases
==========
We should list here a number of real cases that we would like to handle.
